{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactry720"
		},
		"gen2strg_ls_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'gen2strg_ls'"
		},
		"gen2strg_ls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stgaccnt720.dfs.core.windows.net/"
		},
		"ls_keyvault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://keyvault720.vault.azure.net/"
		},
		"ls_sqldb_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlserver720.database.windows.net"
		},
		"ls_sqldb_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sqldb_720"
		},
		"ls_sqldb_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "ibrahimkhaleel720"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "25_Dataflow_alterrow_deleteactvty",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"customersource1": {},
									"source1": {},
									"customersource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflow"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-29T07:20:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/25_Dataflow_alterrow_deleteactvty')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/wait_until_actvty')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "setflag",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "flag",
							"value": "flase"
						}
					},
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "setflag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('flag'),'true')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "gettodaydate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "getfilelist",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "date",
										"value": {
											"value": "@formatDateTime(utcnow(),'ddMMyyyy')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Filter1",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "gettodaydate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('Get Metadata1').output.childItems",
											"type": "Expression"
										},
										"condition": {
											"value": "@contains(item().name,variables('date'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "checklen",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Filter1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "length",
										"value": {
											"value": "@array(length(activity('Filter1').output.Value))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "checklen",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(variables('length'),3)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 30
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy data1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "source_waitactvty",
														"type": "DatasetReference",
														"parameters": {
															"srcfilename": {
																"value": "@variables('filelist')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "sink_waitactvty",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											},
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Copy data1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "flag",
													"value": "true"
												}
											}
										]
									}
								},
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "getmeta_ds",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "getfilelist",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filelist",
										"value": {
											"value": "@activity('Get Metadata1').output.childItems",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"date": {
						"type": "String"
					},
					"length": {
						"type": "Array"
					},
					"flag": {
						"type": "String"
					},
					"filelist": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "wait,until_actvty"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-24T14:55:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/getmeta_ds')]",
				"[concat(variables('factoryId'), '/datasets/source_waitactvty')]",
				"[concat(variables('factoryId'), '/datasets/sink_waitactvty')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/deptinfo_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "gen2strg_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataflow_ds"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dept11.csv",
						"folderPath": "inbound1",
						"fileSystem": "folder"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "LOCATION_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/gen2strg_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employee_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "gen2strg_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataflow_ds"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "employees.csv",
						"folderPath": "inbound1",
						"fileSystem": "folder"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/gen2strg_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/getmeta_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "gen2strg_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "wait,until_actvty"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "inbound",
						"fileSystem": "folder"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/gen2strg_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sink_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "gen2strg_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataflow_ds"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "outbound",
						"fileSystem": "folder"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/gen2strg_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sink_waitactvty')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "gen2strg_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "wait,until_actvty"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "outbound",
						"fileSystem": "folder"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/gen2strg_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sinkds_sqldb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sqldb",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataflow_ds"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "deptno",
						"type": "int",
						"precision": 10
					},
					{
						"name": "deptname",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "cust_dtls"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_waitactvty')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "gen2strg_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"srcfilename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "wait,until_actvty"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().srcfilename",
							"type": "Expression"
						},
						"folderPath": "inbound",
						"fileSystem": "folder"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/gen2strg_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sr_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "gen2strg_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataflow_ds"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "cc4.csv",
						"folderPath": "inbound1",
						"fileSystem": "folder"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/gen2strg_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_json_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "gen2strg_ls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataflow_ds"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "emp_details_corrupted.json",
						"folderPath": "inbound1",
						"fileSystem": "folder"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer"
						},
						"name": {
							"type": "string"
						},
						"gender": {
							"type": "string"
						},
						"language": {
							"type": "string"
						},
						"location": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/gen2strg_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_sqldb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sqldb",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Dataflow_ds"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "empid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "empname",
						"type": "varchar"
					},
					{
						"name": "skills",
						"type": "varchar"
					},
					{
						"name": "address",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp_information"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/gen2strg_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('gen2strg_ls_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('gen2strg_ls_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_keyvault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_keyvault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sqldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_sqldb_properties_typeProperties_server')]",
					"database": "[parameters('ls_sqldb_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_sqldb_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_keyvault",
							"type": "LinkedServiceReference"
						},
						"secretName": "sqldb"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_keyvault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/10_Dataflow_rank_dnsrnk')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sr_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "rank1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          empname as string,",
						"          gender as string,",
						"          deptno as short,",
						"          sal as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 rank(desc(sal, true),",
						"     output(rnk as long)) ~> rank1",
						"rank1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['result_rnk_dnsrnk.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sr_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/11_Dataflow_windowfnctn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sr_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          empname as string,",
						"          gender as string,",
						"          deptno as short,",
						"          sal as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 window(over(deptno),",
						"     desc(sal, true),",
						"     drnk = denseRank()) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['result_rnk_dnsrnk.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sr_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/12_Dataflow_fileto_table')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sr_ds",
								"type": "DatasetReference"
							},
							"name": "deptinfo"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sinkds_sqldb",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          deptno as short,",
						"          deptname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> deptinfo",
						"deptinfo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          deptno as integer,",
						"          deptname as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sr_ds')]",
				"[concat(variables('factoryId'), '/datasets/sinkds_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/13_Dataflow_singlline_jsontrnsfrmtin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "src_json_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          gender as string,",
						"          language as string,",
						"          location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_json_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/14_Dataflow_multiline_jsontrnsfrmtin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "src_json_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          gender as string,",
						"          id as boolean,",
						"          language as string,",
						"          location as string,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_json_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/15_Dataflow_multiple_jsontrnsfrmtin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "src_json_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          gender as string,",
						"          id as short,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_json_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/16_Dataflow_missingclmn_jsontrnsfrmtin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "src_json_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          gender as string,",
						"          id as short,",
						"          location as string,",
						"          name as string,",
						"          phonenumber as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_json_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/17_Dataflow_nstdjson_jsontrnsfrmtin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "src_json_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          address as (city as string, country as string),",
						"          gender as string,",
						"          id as short,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source1",
						"source1 select(mapColumn(",
						"          city = address.city,",
						"          country = address.country,",
						"          gender,",
						"          id,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_json_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/18_Dataflow_nstdjson2_jsontrnsfrmtin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "src_json_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          address as (city as string, country as string, house_dtls as (doorno as string, street as string)),",
						"          gender as string,",
						"          id as short,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source1",
						"source1 select(mapColumn(",
						"          city = address.city,",
						"          country = address.country,",
						"          doorno = address.house_dtls.doorno,",
						"          street = address.house_dtls.street,",
						"          id,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_json_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/19_Dataflow_jsonwitharray')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "src_json_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          gender as string,",
						"          id as short,",
						"          languages as string[],",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source1",
						"source1 foldDown(unroll(languages),",
						"     mapColumn(",
						"          gender,",
						"          id,",
						"          language = languages,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_json_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_Dataflow_select required columns')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee_ds",
								"type": "DatasetReference"
							},
							"name": "employeeinfo"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeeinfo",
						"employeeinfo select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['result_select.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/20_Dataflow_jsonwitharray and nested')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "src_json_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          address as (city as string, country as string),",
						"          gender as string,",
						"          id as short,",
						"          languages as string[],",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source1",
						"source1 foldDown(unroll(languages),",
						"     mapColumn(",
						"          city = address.city,",
						"          country = address.country,",
						"          id,",
						"          language = languages,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_json_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/21_Dataflow_Parse')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "src_sqldb",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sinkds_sqldb",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "parse1"
						},
						{
							"name": "parse2"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          empname as string,",
						"          skills as string,",
						"          address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 parse(parse_skills = skills ? (skill1 as string,",
						"          skill2 as string,",
						"          skill3 as string),",
						"     format: 'delimited',",
						"     columnNamesAsHeader: false,",
						"     columnDelimiter: '|',",
						"     nullValue: '') ~> parse1",
						"parse1 parse(parse_address = address ? (city as string,",
						"          country as string),",
						"     format: 'json',",
						"     documentForm: 'arrayOfDocuments') ~> parse2",
						"parse2 select(mapColumn(",
						"          empid,",
						"          empname,",
						"          skill1 = parse_skills.skill1,",
						"          skill2 = parse_skills.skill2,",
						"          skill3 = parse_skills.skill3,",
						"          city = parse_address.city,",
						"          country = parse_address.country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          deptno as integer,",
						"          deptname as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_sqldb')]",
				"[concat(variables('factoryId'), '/datasets/sinkds_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/22_Dataflow_asserttrnsfrmtn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sr_ds",
								"type": "DatasetReference"
							},
							"name": "empasserdata"
						},
						{
							"dataset": {
								"referenceName": "deptinfo_ds",
								"type": "DatasetReference"
							},
							"name": "deptdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "assert1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          empname as string,",
						"          gender as string,",
						"          dob as string,",
						"          deptid as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empasserdata",
						"source(output(",
						"          deptid as short,",
						"          deptname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> deptdata",
						"empasserdata, deptdata assert(expectUnique(empid, false, 'assert1'),",
						"     expectTrue(!isNull(toDate(dob, 'ddMMyyyy')), false, 'assert2'),",
						"     expectExists(empasserdata@deptid == deptdata@deptid, false, 'assert3')) ~> assert1",
						"assert1 derive(Error_Records = isError()) ~> derivedColumn1",
						"derivedColumn1 filter(Error_Records == false()) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sr_ds')]",
				"[concat(variables('factoryId'), '/datasets/deptinfo_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/23_Dataflow_flowlets')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sr_ds",
								"type": "DatasetReference"
							},
							"name": "empdupdata"
						},
						{
							"dataset": {
								"referenceName": "deptinfo_ds",
								"type": "DatasetReference"
							},
							"name": "deptdupdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flowlet1",
							"flowlet": {
								"referenceName": "flowlet1",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "flowlet2",
							"flowlet": {
								"referenceName": "flowlet1",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          empname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empdupdata",
						"source(output(",
						"          deptid as short,",
						"          deptname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> deptdupdata",
						"empdupdata compose(mapColumn(",
						"          id = empid,",
						"          name = empname",
						"     ),",
						"     composition: 'flowlet1') ~> flowlet1@(output1)",
						"deptdupdata compose(mapColumn(",
						"          id = deptid,",
						"          name = deptname",
						"     ),",
						"     composition: 'flowlet1') ~> flowlet2@(output1)",
						"flowlet1@output1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/flowlet1')]",
				"[concat(variables('factoryId'), '/datasets/sr_ds')]",
				"[concat(variables('factoryId'), '/datasets/deptinfo_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/24_Dataflow_alterrow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "4_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sr_ds",
								"type": "DatasetReference"
							},
							"name": "customersource1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sinkds_sqldb",
								"type": "DatasetReference"
							},
							"name": "customersource"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          cust_id as string,",
						"          cust_name as string,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customersource1",
						"customersource1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          deptno as integer,",
						"          deptname as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['cust_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> customersource"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sr_ds')]",
				"[concat(variables('factoryId'), '/datasets/sinkds_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/25_Dataflow_alterrow_deleteactvty')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "4_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sr_ds",
								"type": "DatasetReference"
							},
							"name": "customersource1"
						},
						{
							"dataset": {
								"referenceName": "sinkds_sqldb",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sinkds_sqldb",
								"type": "DatasetReference"
							},
							"name": "customersource"
						},
						{
							"dataset": {
								"referenceName": "sinkds_sqldb",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "exists1"
						},
						{
							"name": "alterRow2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          cust_id as string,",
						"          cust_name as string,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customersource1",
						"source(output(",
						"          cust_id as string,",
						"          cust_name as string,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"customersource1 alterRow(upsertIf(true())) ~> alterRow1",
						"source1, customersource1 exists(source1@cust_id == customersource1@cust_id,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 alterRow(deleteIf(true())) ~> alterRow2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          deptno as integer,",
						"          deptname as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['cust_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> customersource",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          deptno as integer,",
						"          deptname as string",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['cust_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sr_ds')]",
				"[concat(variables('factoryId'), '/datasets/sinkds_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2_dataflow_DerivedColumn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee_ds",
								"type": "DatasetReference"
							},
							"name": "employeeinfo"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as integer,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeeinfo",
						"employeeinfo select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(SALARY = SALARY+10000,",
						"          FullName = concat(FIRST_NAME + LAST_NAME)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['result_derivedclmn.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3_Dataflow_filter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee_ds",
								"type": "DatasetReference"
							},
							"name": "employeeinfo"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeeinfo",
						"employeeinfo filter(DEPARTMENT_ID == 60) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['result_filter.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/4_Dataflow_groupby_aggregate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee_ds",
								"type": "DatasetReference"
							},
							"name": "employeeinfo"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as integer,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeeinfo",
						"employeeinfo aggregate(groupBy(DEPARTMENT_ID),",
						"     Totalsalary = sum(SALARY)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['result_grpby_aggregate.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/5_Dataflow_groupby_aggregate_Having')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee_ds",
								"type": "DatasetReference"
							},
							"name": "employeeinfo"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as integer,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeeinfo",
						"employeeinfo aggregate(groupBy(DEPARTMENT_ID),",
						"     Totalsalary = sum(SALARY)) ~> aggregate1",
						"aggregate1 filter(Totalsalary > 10000) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['result_grpby_aggregate_Having(filter).csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/6_Dataflow_sort_orderby')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee_ds",
								"type": "DatasetReference"
							},
							"name": "employeeinfo"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as integer,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeeinfo",
						"employeeinfo sort(desc(SALARY, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['result_sort(orderby).csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/7_Dataflow_Conditionalsplit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee_ds",
								"type": "DatasetReference"
							},
							"name": "employeeinfo"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as integer,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeeinfo",
						"employeeinfo split(DEPARTMENT_ID == 50,",
						"     disjoint: false) ~> split1@(didd50, restdid)",
						"split1@didd50 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['result_cndtnalsplit_did50.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"split1@restdid sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['result_cndtnlsplit_restdid.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/8_Dataflow_joins')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee_ds",
								"type": "DatasetReference"
							},
							"name": "employeeinfo"
						},
						{
							"dataset": {
								"referenceName": "deptinfo_ds",
								"type": "DatasetReference"
							},
							"name": "deptinfo"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as integer,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeeinfo",
						"source(output(",
						"          DEPARTMENT_ID as integer,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as string,",
						"          LOCATION_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> deptinfo",
						"employeeinfo, deptinfo join(employeeinfo@DEPARTMENT_ID == deptinfo@DEPARTMENT_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['result_join.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee_ds')]",
				"[concat(variables('factoryId'), '/datasets/deptinfo_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/9_dataflow_pivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2_Dataflow"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sr_ds",
								"type": "DatasetReference"
							},
							"name": "employeeinfo"
						},
						{
							"dataset": {
								"referenceName": "sr_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sink_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "pivot1"
						},
						{
							"name": "unpivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as short,",
						"          firstname as string,",
						"          lastname as string,",
						"          age as short,",
						"          salary as short,",
						"          gender as string,",
						"          deptno as short,",
						"          state as string,",
						"          mobilenumber as long,",
						"          mail as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeeinfo",
						"source(output(",
						"          deptno as short,",
						"          F as string,",
						"          M as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"employeeinfo aggregate(groupBy(deptno,",
						"          gender),",
						"     TotalSalary = sum(salary)) ~> aggregate1",
						"aggregate1 pivot(groupBy(deptno),",
						"     pivotBy(gender),",
						"     {} = sum(TotalSalary),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"source1 unpivot(output(",
						"          gender as string,",
						"          totalsalary as string",
						"     ),",
						"     ungroupBy(deptno),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['result_pivot.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sr_ds')]",
				"[concat(variables('factoryId'), '/datasets/sink_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/flowlet1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3_Dataflow"
				},
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						},
						{
							"name": "input1"
						},
						{
							"name": "output1"
						}
					],
					"scriptLines": [
						"input(output(",
						"          id as short,",
						"          name as string",
						"     ),",
						"     order: 0,",
						"     allowSchemaDrift: true) ~> input1",
						"input1 aggregate(groupBy(id,",
						"          name),",
						"     cnt = count()) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          id,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 output() ~> output1"
					]
				}
			},
			"dependsOn": []
		}
	]
}